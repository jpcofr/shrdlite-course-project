///<reference path="World.ts"/>
///<reference path="Interpreter.ts"/>

/**
* Planner module
*
* The goal of the Planner module is to take the interpetation(s)
* produced by the Interpreter module and to plan a sequence of actions
* for the robot to put the world into a state compatible with the
* user's command, i.e. to achieve what the user wanted.
*
* The planner should use your A* search implementation to find a plan.
*/
module Planner {

    //////////////////////////////////////////////////////////////////////
    // exported functions, classes and interfaces/types

    /**
     * Top-level driver for the Planner. Calls `planInterpretation` for each given interpretation generated by the Interpreter.
     * @param interpretations List of possible interpretations.
     * @param currentState The current state of the world.
     * @returns Augments Interpreter.InterpretationResult with a plan represented by a list of strings.
     */
    export function plan(interpretations : Interpreter.InterpretationResult[], currentState : WorldState) : PlannerResult[] {
        var errors : Error[] = [];
        var plans : PlannerResult[] = [];
        interpretations.forEach((interpretation) => {
            try {
                var result : PlannerResult = <PlannerResult>interpretation;
                result.plan = planInterpretation(result.interpretation, currentState);
                if (result.plan.length == 0) {
                    result.plan.push("That is already true!");
                }
                plans.push(result);
            } catch(err) {
                errors.push(err);
            }
        });
        if (plans.length) {
            return plans;
        } else {
            // only throw the first error found
            throw errors[0];
        }
    }

    export interface PlannerResult extends Interpreter.InterpretationResult {
        plan : string[];
    }

    export function stringify(result : PlannerResult) : string {
        return result.plan.join(", ");
    }

    //////////////////////////////////////////////////////////////////////
    // private functions
    /**
     * Checks whether the given literal is satisfied in the given
     * world state.
     */
    function isValid(lit : Interpreter.Literal, state : WorldState) : boolean {
        // literal has polarity (boolean), relation (string), args (string list)
        // either the relation is "holding" with one argument, or there are 2 args?
        var isTrue : boolean = false;
        var ob1 : string = lit.args[0];
        if (lit.relation == "holding") {
            isTrue = (ob1 == state.holding);
        }
        else {
            // we have 2 arguments
            var ob2 = lit.args[1];
            var loc1 = Interpreter.locateObjectId(ob1, state);
            var loc2 = Interpreter.locateObjectId(ob2, state);
            if (ob1 == "floor") {
                isTrue = lit.relation == "under";
            }
            else if (ob2 == "floor") {
                isTrue = lit.relation == "above";
                if (lit.relation == "ontop") {
                    isTrue = loc1.row == 0;
                }
            }
            else {
                // we are not dealing with the floor
                switch(lit.relation) {
                case "ontop" :
                    isTrue = (loc1.col == loc2.col && loc1.row == loc2.row + 1);
                    break;
                case "inside" :
                    isTrue = (loc1.col == loc2.col && loc1.row == loc2.row + 1);
                    break;
                case "above" :
                    isTrue = (loc1.col == loc2.col && loc1.row > loc2.row);
                    break;
                case "under" :
                    isTrue = (loc1.col == loc2.col && loc1.row < loc2.row);
                    break;
                case "beside" :
                    isTrue = (Math.abs(loc1.col - loc2.col) == 1);
                    break;
                case "leftof" :
                    isTrue = (loc1.col == loc2.col - 1);
                    break;
                case "rightof" :
                    isTrue = (loc1.col == loc2.col + 1);
                    break;
                }
            }
        }
        return (lit.polarity == isTrue);
    }

   /**
    * A heuristic for how far a given state is from a goal literal.
    */
    function litHeuristic(state: WorldState, lit: Interpreter.Literal) : number {
        if (isValid(lit,state)) {
            return 0;
        }
        else {
            // The goal has not been reached
            // Lots of room for improvement:
            // - How many things are on top of the thing we need to move?
            // - Special case if one of the arg objs is being held? Add pickup/drop steps?
            var minSteps = 0;
            var ob1 : string = lit.args[0];
            var loc1 = Interpreter.locateObjectId(ob1, state);
            var armPos : number = state.arm;
            if (lit.relation == "holding") {
                minSteps = Math.abs(loc1.col - armPos) + 1;
            }
            else {
                // we have 2 arguments
                var ob2 = lit.args[1];
                var loc2 = Interpreter.locateObjectId(ob2, state);
                if (ob1 == "floor") {
                    minSteps = 0;
                }
                else if (ob2 == "floor") {
                    minSteps = 0;
                }
                else {
                    // we are not dealing with the floor
                    switch(lit.relation) {
                    case "ontop" :
                    case "inside" :
                    case "above" :
                    case "under" :
                        minSteps = Math.abs(loc1.col - loc2.col);
                        break;
                    case "beside" :
                        minSteps = Math.abs(loc1.col - loc2.col) - 1;
                        break;
                    case "leftof" :
                    case "rightof" :
                        minSteps = Math.abs(loc1.col - loc2.col) + 1;
                        break;
                    }
                }
            }
        }
        return 0;
    }

   /**
    * A heuristic for how far a given state is from a goal DNF formula.
    */
    function heuristic(state : WorldState, goal : Interpreter.DNFFormula) : number {
        var min = Number.MAX_VALUE;
        for (let conjunction of goal) {
            var lHs = conjunction.map(function (x) { return litHeuristic(state,x);})
            var maxH = Math.max(...lHs);
            if (maxH < min) {
                min = maxH;
            }
        }
        return min;
    }

    /**
     * The core planner function. The code here is just a template;
     * you should rewrite this function entirely. In this template,
     * the code produces a dummy plan which is not connected to the
     * argument `interpretation`, but your version of the function
     * should be such that the resulting plan depends on
     * `interpretation`.
     *
     *
     * @param interpretation The logical interpretation of the user's desired goal. The plan needs to be such that by executing it, the world is put into a state that satisfies this goal.
     * @param state The current world state.
     * @returns Basically, a plan is a
     * stack of strings, which are either system utterances that
     * explain what the robot is doing (e.g. "Moving left") or actual
     * actions for the robot to perform, encoded as "l", "r", "p", or
     * "d". The code shows how to build a plan. Each step of the plan can
     * be added using the `push` method.
     */
    function planInterpretation(interpretation : Interpreter.DNFFormula, state : WorldState) : string[] {
        // This function returns a dummy plan involving a random stack
        do {
            var pickstack = Math.floor(Math.random() * state.stacks.length);
        } while (state.stacks[pickstack].length == 0);
        var plan : string[] = [];

        // First move the arm to the leftmost nonempty stack
        if (pickstack < state.arm) {
            plan.push("Moving left");
            for (var i = state.arm; i > pickstack; i--) {
                plan.push("l");
            }
        } else if (pickstack > state.arm) {
            plan.push("Moving right");
            for (var i = state.arm; i < pickstack; i++) {
                plan.push("r");
            }
        }

        // Then pick up the object
        var obj = state.stacks[pickstack][state.stacks[pickstack].length-1];
        plan.push("Picking up the " + state.objects[obj].form,
                  "p");

        if (pickstack < state.stacks.length-1) {
            // Then move to the rightmost stack
            plan.push("Moving as far right as possible");
            for (var i = pickstack; i < state.stacks.length-1; i++) {
                plan.push("r");
            }

            // Then move back
            plan.push("Moving back");
            for (var i = state.stacks.length-1; i > pickstack; i--) {
                plan.push("l");
            }
        }

        // Finally put it down again
        plan.push("Dropping the " + state.objects[obj].form,
                  "d");

        return plan;
    }

}
